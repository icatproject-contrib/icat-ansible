---
- name: "Install jq package"
  package:
    name: jq
    state: present

- name: "Check topcat package"
  stat:
    path: /home/{{ payara_user }}/downloads/topcat-{{ topcat_version }}-distro.zip
  register: packageResult

- name: "Download topcat"
  get_url:
    url: https://repo.icatproject.org/repo/org/icatproject/topcat/{{ topcat_version }}/topcat-{{ topcat_version }}-distro.zip
    dest: /home/{{ payara_user }}/downloads
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: 0664
  when: packageResult.stat.exists is defined and packageResult.stat.exists == false

- name: "Check topcat installation"
  stat:
    path: /home/{{ payara_user }}/install/topcat
  register: installationResult

- name: "Unarchive topcat if not installed"
  unarchive:
    src: /home/{{ payara_user }}/downloads/topcat-{{ topcat_version }}-distro.zip
    dest: /home/{{ payara_user }}/install
    remote_src: true
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
  when: installationResult.stat.exists is defined and installationResult.stat.exists == false

- name: "Force ansible to regather local facts - needed to detect whether mariadb has been installed and which auth plugins are installed"
  setup:
    filter: ansible_local

- name: "Create database for topcat"
  mysql_db:
    name: "{{ topcat_database }}"
    login_user: "{{ db_root_username }}"
    login_password: "{{ db_root_password }}"
  when: (ansible_local is defined) and (ansible_local.local is defined) and (ansible_local.local.instantiations is defined) and (ansible_local.local.instantiations.mariadb is defined) and (ansible_local.local.instantiations.mariadb == 'true')

- name: "Create user for topcat database"
  mysql_user:
    name: "{{ db_topcat_username }}"
    password: "{{ db_topcat_password }}"
    priv: "{{ topcat_database }}.*:ALL,GRANT"
    login_user: "{{ db_root_username }}"
    login_password: "{{ db_root_password }}"
  when: (ansible_local is defined) and (ansible_local.local is defined) and (ansible_local.local.instantiations is defined) and (ansible_local.local.instantiations.mariadb is defined) and (ansible_local.local.instantiations.mariadb == 'true')

- name: "Check topcat-setup.properties file existence"
  local_action: stat path={{ role_path }}/files/topcat-setup.properties
  become: false
  register: setupPropertiesResult

- name: "Configure topcat-setup.properties via copying"
  copy:
    src: files/setup.properties
    dest: /home/{{ payara_user }}/install/topcat/topcat-setup.properties
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: 0600
  when: setupPropertiesResult.stat.exists is defined and setupPropertiesResult.stat.exists == true
  notify:
    - "topcat-handler"

- name: "Configure topcat-setup.properties via templating"
  import_tasks: tasks/create-setup-properties.yml
  when: setupPropertiesResult.stat.exists is defined and setupPropertiesResult.stat.exists == false
  notify:
    - "topcat-handler"

- name: "Check topcat.properties file existence"
  local_action: stat path={{ role_path }}/files/topcat.properties
  become: false
  register: runPropertiesResult

- name: "Configure topcat.properties via copying"
  copy:
    src: files/topcat.properties
    dest: /home/{{ payara_user }}/install/topcat/topcat.properties
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: 0664
  when: runPropertiesResult.stat.exists is defined and runPropertiesResult.stat.exists == true
  notify:
    - "topcat-handler"

- name: "Configure topcat.properties via templating"
  template:
    src: templates/topcat.properties.j2
    dest: /home/{{ payara_user }}/install/topcat/topcat.properties
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: 0664
  when: runPropertiesResult.stat.exists is defined and runPropertiesResult.stat.exists == false
  notify:
    - "topcat-handler"

- name: "Check topcat.json file existence"
  local_action: stat path={{ role_path }}/files/topcat.json
  become: false
  register: topcatJsonResult

- name: "Configure topcat.json via copying"
  copy:
    src: files/topcat.json
    dest: /home/{{ payara_user }}/install/topcat/topcat.json
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: 0664
  when: topcatJsonResult.stat.exists is defined and topcatJsonResult.stat.exists == true
  notify:
    - "topcat-handler"

- name: "Configure topcat.json via templating"
  import_tasks: tasks/create-topcat-json.yml
  when: topcatJsonResult.stat.exists is defined and topcatJsonResult.stat.exists == false
  notify:
    - "topcat-handler"

- name: "Check lang.json file existence"
  local_action: stat path={{ role_path }}/files/lang.json
  become: false
  register: langJsonResult

- name: "Configure lang.json via copying"
  copy:
    src: files/lang.json
    dest: /home/{{ payara_user }}/install/topcat/lang.json
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: 0664
  when: langJsonResult.stat.exists is defined and langJsonResult.stat.exists == true
  notify:
    - "topcat-handler"

- name: "Configure lang.json via defaults"
  copy:
    src: /home/{{ payara_user }}/install/topcat/lang.json.example
    dest: /home/{{ payara_user }}/install/topcat/lang.json
    remote_src: true
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: 0664
  when: langJsonResult.stat.exists is defined and langJsonResult.stat.exists == false
  notify:
    - "topcat-handler"

- name: "Check topcat.css file existence"
  local_action: stat path={{ role_path }}/files/topcat.css
  become: false
  register: topcatCssResult

- name: "Configure topcat.css via copying"
  copy:
    src: files/topcat.css
    dest: /home/{{ payara_user }}/install/topcat/topcat.css
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: 0664
  when: topcatCssResult.stat.exists is defined and topcatCssResult.stat.exists == true
  notify:
    - "topcat-handler"

- name: "Configure topcat.css via defaults"
  copy:
    src: /home/{{ payara_user }}/install/topcat/topcat.css.example
    dest: /home/{{ payara_user }}/install/topcat/topcat.css
    remote_src: true
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: 0664
  when: topcatCssResult.stat.exists is defined and topcatCssResult.stat.exists == false
  notify:
    - "topcat-handler"

- name: "Check content directory"
  local_action: stat path={{ role_path }}/files/content
  become: false
  register: contentResult

- name: "Ensure content directory doesn't exist"
  file:
    path: /home/{{ payara_user }}/install/topcat/content
    state: absent

- name: "Create empty content directory"
  file:
    path: /home/{{ payara_user }}/install/topcat/content
    state: directory
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: u=rwX,g=rX,o=rX

- name: "Configure content directory via copying"
  copy:
    src: files/content/
    dest: /home/{{ payara_user }}/install/topcat/content
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: u=rwX,g=rX,o=rX
  when: contentResult.stat.exists is defined and contentResult.stat.exists == true
  notify:
    - "topcat-handler"

- name: "Configure content directory via defaults"
  copy:
    src: /home/{{ payara_user }}/install/topcat/content.example/
    dest: /home/{{ payara_user }}/install/topcat/content
    remote_src: true
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: u=rwX,g=rX,o=rX
  when: contentResult.stat.exists is defined and contentResult.stat.exists == false
  notify:
    - "topcat-handler"

- name: "Configure topcat logback.xml"
  copy:
    src: files/logback.xml
    dest: /home/{{ payara_user }}/install/topcat/logback.xml
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: 0664
  notify:
    - "topcat-handler"

- name: "Setup topcat if not setup"
  import_tasks: tasks/installation.yml
  when: (ansible_local is not defined) or (ansible_local.local is not defined) or (ansible_local.local.instantiations is not defined) or (ansible_local.local.instantiations.topcat is not defined) or (ansible_local.local.instantiations.topcat != 'true')
