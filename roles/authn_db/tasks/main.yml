---
- name: "Extract SNAPSHOT version number when snapshot URL is given"
  set_fact:
    authn_db_download_url: "{{ authn_db_snapshot_url }}"
    authn_db_version: "{{ authn_db_snapshot_url | regex_search( '[0-9]*.[0-9]*.[0-9]*-SNAPSHOT' ) }}"
    authn_db_download_filename: "{{ authn_db_snapshot_url | regex_search('authn.db.[^\/]*-distro.zip') }}"
  when: authn_db_snapshot_url is defined

- name: "Set download URL when snapshot URL is not given"
  set_fact:
    authn_db_download_url: https://repo.icatproject.org/repo/org/icatproject/authn.db/{{ authn_db_version }}/authn.db-{{ authn_db_version }}-distro.zip
    authn_db_download_filename: authn.db-{{ authn_db_version }}-distro.zip
  when: authn_db_snapshot_url is not defined

- name: "Check authn_db package"
  stat:
    path: /home/{{ payara_user }}/downloads/{{ authn_db_download_filename }}
  register: packageResult

- name: "Download authn_db"
  get_url:
    url: "{{ authn_db_download_url }}"
    dest: /home/{{ payara_user }}/downloads
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: 0664
  when: packageResult.stat.exists is defined and packageResult.stat.exists == false

- name: 'Unarchive authn_db if not installed'
  unarchive:
    src: /home/{{ payara_user }}/downloads/{{ authn_db_download_filename }}
    dest: /home/{{ payara_user }}/install
    remote_src: true
    owner: '{{ payara_user }}'
    group: '{{ payara_user }}'
  when: ansible_local.local.instantiations.authn_db is not defined or ansible_local.local.versions.authn_db != authn_db_version

- name: "Find any war files not matching the current version"
  find:
    paths: /home/{{ payara_user }}/install/authn.db/
    use_regex: yes
    patterns: "^.*(?<!{{ authn_db_version }})\\.war$"
  register: warFilesResult

- name: "Remove war files not matching the current version"
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ warFilesResult.files }}"

- name: "Check setup.properties file existence"
  local_action: stat path={{ role_path }}/files/setup.properties
  become: false
  register: setupPropertiesResult

- name: "Configure authn_db setup.properties via copying"
  copy:
    src: files/setup.properties
    dest: /home/{{ payara_user }}/install/authn.db/setup.properties
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: 0600
  when: setupPropertiesResult.stat.exists is defined and setupPropertiesResult.stat.exists == true
  notify:
    - "authn_db-handler"

- name: "Configure authn_db setup.properties via templating [MariaDB]"
  template:
    src: templates/mariadb.setup.properties.j2
    dest: /home/{{ payara_user }}/install/authn.db/setup.properties
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: 0600
  when: setupPropertiesResult.stat.exists is defined and setupPropertiesResult.stat.exists == false and (ansible_local.local.instantiations.mariadb is defined and ansible_local.local.instantiations.mariadb == 'true')
  notify:
    - "authn_db-handler"

- name: "Configure authn_db setup.properties via templating [Oracle]"
  template:
    src: templates/oracle.setup.properties.j2
    dest: /home/{{ payara_user }}/install/authn.db/setup.properties
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: 0600
  when: setupPropertiesResult.stat.exists is defined and setupPropertiesResult.stat.exists == false and (ansible_local.local.instantiations.mariadb is not defined or ansible_local.local.instantiations.mariadb == 'false')
  notify:
    - "authn_db-handler"

- name: "Check run.properties file existence"
  local_action: stat path={{ role_path }}/files/run.properties
  become: false
  register: runPropertiesResult

- name: "Configure authn_db run.properties via copying"
  copy:
    src: files/run.properties
    dest: /home/{{ payara_user }}/install/authn.db/run.properties
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: 0664
  when: runPropertiesResult.stat.exists is defined and runPropertiesResult.stat.exists == true
  notify:
    - "authn_db-handler"

- name: "Configure authn_db run.properties via templating"
  template:
    src: templates/run.properties.j2
    dest: /home/{{ payara_user }}/install/authn.db/run.properties
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: 0664
  when: runPropertiesResult.stat.exists is defined and runPropertiesResult.stat.exists == false
  notify:
    - "authn_db-handler"

- name: "Configure authn_db logback.xml"
  copy:
    src: files/logback.xml
    dest: /home/{{ payara_user }}/install/authn.db/logback.xml
    owner: "{{ payara_user }}"
    group: "{{ payara_user }}"
    mode: 0664
  notify:
    - "authn_db-handler"

- name: "Setup authn_db if not setup or a different version is found"
  import_tasks: tasks/installation.yml
  when: (ansible_local is not defined) or (ansible_local.local is not defined) or (ansible_local.local.instantiations is not defined) or (ansible_local.local.instantiations.authn_db is not defined) or (ansible_local.local.instantiations.authn_db != 'true') or (ansible_local.local.versions.authn_db != authn_db_version)

- name: "Setup default database users"
  import_tasks: create_default_users.yml
  when: (ansible_local is defined) and (ansible_local.local is defined) and (ansible_local.local.instantiations is defined) and (ansible_local.local.instantiations.mariadb is defined) and (ansible_local.local.instantiations.mariadb == 'true')
