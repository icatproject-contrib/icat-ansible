---
- name: 'Create payara user group'
  group:
    name: '{{ payara_user }}'
    state: present

- name: 'Create payara user'
  user:
    name: '{{ payara_user }}'
    createhome: true
    local: '{{ payara_user_local }}'
    group: '{{ payara_user }}'
    shell: /bin/bash

- name: 'Create downloads directory'
  file:
    path: /home/{{ payara_user }}/downloads
    state: directory
    owner: '{{ payara_user }}'
    group: '{{ payara_user }}'
    mode: 0775

- name: 'Create install directory'
  file:
    path: /home/{{ payara_user }}/install
    state: directory
    owner: '{{ payara_user }}'
    group: '{{ payara_user }}'
    mode: 0775

- name: 'Create scripts directory'
  file:
    path: /home/{{ payara_user }}/scripts
    state: directory
    owner: '{{ payara_user }}'
    group: '{{ payara_user }}'
    mode: 0775

- name: 'Create unpackage directory'
  file:
    path: /home/{{ payara_user }}/unpackage
    state: directory
    owner: '{{ payara_user }}'
    group: '{{ payara_user }}'
    mode: 0775

- name: 'Install payara init script'
  template:
    src: templates/payara-init.j2
    dest: '/usr/local/bin/payara-init'
    owner: root
    group: root
    mode: 0775

- name: 'Check if .bash_profile exists'
  stat:
    path: /home/{{ payara_user }}/.bash_profile
  register: bashProfileResult

- name: 'Add path to payara executable to PATH variable in .bash_profile'
  lineinfile:
    path: /home/{{ payara_user }}/.bash_profile
    line: 'export PATH={{ payara_dir }}/bin:$PATH'
    regexp: '^export PATH=\/.*\/payara.*\/bin:\$PATH$'
  when: bashProfileResult.stat.exists is defined and bashProfileResult.stat.exists == true

- name: 'Add path to payara executable to PATH variable in .profile'
  lineinfile:
    path: /home/{{ payara_user }}/.profile
    line: 'export PATH={{ payara_dir }}/bin:$PATH'
    regexp: '^export PATH=\/.*\/payara.*\/bin:\$PATH$'
  when: bashProfileResult.stat.exists is defined and bashProfileResult.stat.exists == false

- name: 'Check payara package'
  stat:
    path: /home/{{ payara_user }}/downloads/payara-{{ payara_version }}.zip
  register: packageResult

- name: 'Download payara'
  get_url:
    url: http://search.maven.org/remotecontent?filepath=fish/payara/distributions/payara/{{ payara_version }}/payara-{{ payara_version }}.zip
    dest: /home/{{ payara_user }}/downloads
    owner: '{{ payara_user }}'
    group: '{{ payara_user }}'
    mode: 0664
  when: packageResult.stat.exists is defined and packageResult.stat.exists == false

- name: 'Check payara setup script'
  stat:
    path: /home/{{ payara_user }}/scripts/setup-glassfish.py
  register: scriptResult

- name: 'Download payara setup script'
  get_url:
    url: https://icatproject.org/misc/scripts/setup-glassfish.py
    dest: /home/{{ payara_user }}/scripts
    owner: '{{ payara_user }}'
    group: '{{ payara_user }}'
    mode: 0664
  when: scriptResult.stat.exists is defined and scriptResult.stat.exists == false

- name: 'Check payara installation'
  stat:
    path: '{{ payara_dir }}'
  register: installationResult

- name: 'Delete contents of /home/{{ payara_user }}/unpackage'
  shell: 'su -l {{ payara_user }} -c "rm -rf /home/{{ payara_user }}/unpackage/*"'
  become: true
  become_user: root
  args:
    executable: /bin/bash
  when: installationResult.stat.exists is defined and installationResult.stat.exists == false

- name: 'Unarchive payara if not installed'
  unarchive:
    src: /home/{{ payara_user }}/downloads/payara-{{ payara_version }}.zip
    dest: /home/{{ payara_user }}/unpackage
    remote_src: true
    owner: '{{ payara_user }}'
    group: '{{ payara_user }}'
  when: installationResult.stat.exists is defined and installationResult.stat.exists == false

- name: 'Move contents of /home/{{ payara_user }}/unpackage'
  shell: 'su -l {{ payara_user }} -c "mv /home/{{ payara_user }}/unpackage/payara* {{ payara_dir }}"'
  become: true
  become_user: root
  args:
    executable: /bin/bash
  when: installationResult.stat.exists is defined and installationResult.stat.exists == false

- name: 'Make sure we are using the correct java version for payara'
  lineinfile:
    path: '{{ payara_dir }}/glassfish/config/asenv.conf'
    line: 'AS_JAVA="{{ java_dir }}"'
    regexp: '^AS_JAVA='

- name: 'Setup payara if not setup'
  import_tasks: tasks/installation.yml
  when: (ansible_local is not defined) or (ansible_local.local is not defined) or (ansible_local.local.instantiations is not defined) or (ansible_local.local.instantiations.payara is not defined) or (ansible_local.local.instantiations.payara != 'true') or (ansible_local.local.versions.payara != payara_version)

- name: 'Check payara domain'
  stat:
    path: '{{ payara_domain_dir }}/lib'
  register: domainResult

- name: 'Create directory for local jars'
  file:
    path: /usr/local/share/java
    state: directory
    owner: root
    group: root
    mode: 0775
  when: (install_mysql_connector_j | bool) or (install_ojdbc11_jar | bool)

- name: 'Download mysql-connector-j.jar'
  get_url:
    url: https://repo1.maven.org/maven2/com/mysql/mysql-connector-j/{{ mysql_connector_j_version }}/mysql-connector-j-{{ mysql_connector_j_version }}.jar
    dest: /usr/local/share/java/mysql-connector-j-{{ mysql_connector_j_version }}.jar
    owner: root
    group: root
    mode: 0644
  when: install_mysql_connector_j | bool
  notify: payara-handler

- name: 'Create symlink to mysql-connector-j.jar'
  file:
    src: /usr/local/share/java/mysql-connector-j-{{ mysql_connector_j_version }}.jar
    path: '{{ payara_domain_dir }}/lib/mysql-connector-j.jar'
    state: link
    owner: '{{ payara_user }}'
    group: '{{ payara_user }}'
    follow: no
    force: yes
  when: install_mysql_connector_j | bool
  notify: payara-handler

- name: 'Download ojdbc11.jar'
  get_url:
    url: https://repo1.maven.org/maven2/com/oracle/database/jdbc/ojdbc11/{{ ojdbc11_jar_version }}/ojdbc11-{{ ojdbc11_jar_version }}.jar
    dest: /usr/local/share/java/ojdbc11-{{ ojdbc11_jar_version }}.jar
    owner: root
    group: root
    mode: 0644
  when: install_ojdbc11_jar | bool
  notify: payara-handler

- name: 'Create domain lib/ext directory'
  file:
    state: directory
    path: '{{ payara_domain_dir }}/lib/ext'
    owner: '{{ payara_user }}'
    group: '{{ payara_user }}'
  when: install_ojdbc11_jar | bool
  notify: payara-handler

- name: 'Create symlink to ojdbc11.jar'
  file:
    src: /usr/local/share/java/ojdbc11-{{ ojdbc11_jar_version }}.jar
    path: '{{ payara_domain_dir }}/lib/ext/ojdbc11.jar'
    state: link
    owner: '{{ payara_user }}'
    group: '{{ payara_user }}'
    follow: no
    force: yes
  when: install_ojdbc11_jar | bool
  notify: payara-handler

- meta: flush_handlers
